package com.freemi.ui.controller;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Scope;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.Mapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.client.HttpStatusCodeException;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.freemi.common.util.CommonTask;
import com.freemi.controller.implementations.FolioManagementImpl;
import com.freemi.controller.interfaces.FolioManagementContoller;
import com.freemi.controller.interfaces.FreemiServiceInterface;
import com.freemi.entity.Birla.ValidateAadhaarOTPOutput;
import com.freemi.entity.database.FreemiLoanQuery;
import com.freemi.entity.database.ProductSchemeDetail;
import com.freemi.entity.general.AadhaarOTP;
import com.freemi.entity.general.ClientSystemDetails;
import com.freemi.entity.general.FSecure;
import com.freemi.entity.general.FreemiLoanForm;
import com.freemi.entity.general.Registerform;
import com.freemi.entity.general.RegistryChildEducation;
import com.freemi.entity.general.RegistryOfficeExpense;
import com.freemi.entity.general.RegistryRetirement;
import com.freemi.entity.general.RegistryTravel;
import com.freemi.entity.general.RegistryWish;
import com.freemi.entity.investment.FolioCreationStatus;
import com.freemi.entity.investment.MFInvestForm;
import com.freemi.entity.investment.RegistryFunds;
import com.freemi.repository.interfaces.ProductSchemeDetailService;
import com.freemi.ui.restclient.RestClient;

@Controller
@Scope("session")
@SessionAttributes({"mfInvestForm"})
public class Products {
	private static final Logger logger = LogManager.getLogger(Products.class);
	@Autowired
	ProductSchemeDetailService productSchemeDetailService;
	
	@Autowired
	FreemiServiceInterface freemiServiceInterface; 
	
	@RequestMapping(value = "/register", method = RequestMethod.GET)
	public String loginDisplay(ModelMap model) {
		//logger.info("@@@@ Inside Login..");
		model.addAttribute("registerForm", new Registerform());
		System.out.println("@@@@ LoginController @@@@");
		return "register";
	}

	@RequestMapping(value = "/register.do", method = RequestMethod.GET)
	public String registerUserGet(ModelMap model) {
		return "redirect:/register";
	}

	@RequestMapping(value = "/register.do", method = RequestMethod.POST)
	public String registerUser(@ModelAttribute("registerForm") @Valid Registerform registerForm, BindingResult bindingResult, ModelMap model) {
		System.out.println("@@@@ Inside Login do..");

		if(bindingResult.hasErrors()){
			System.out.println("Error in register form");
			return "register";
		}
		RestClient client = new RestClient();
		ResponseEntity<String> response = null;
		try {
			response = client.registerUser(registerForm);
			String status = response.getHeaders().get("STATUS").get(0);
			if(status.equals("SUCCESS")){
				model.addAttribute("success", "Registration successful. Login to your account");
			}else if(status.equals("DUPLICATE ENTRY")){
				model.addAttribute("error", "Account already exist.");
			}else if(status.equals("ERROR")){
				model.addAttribute("error", "Registration failed. Please try again after sometime");
			}else{
				System.out.println(response.getHeaders().get("STATUS").get(0));
				model.addAttribute("error", "Unknown response");
			}

		}catch(HttpStatusCodeException  e){
			System.out.println("test failure - " + e.getStatusCode());
			model.addAttribute("error", "Unable to process request curretnly");
		} catch (JsonProcessingException e) {
			model.addAttribute("error","Invalid form data");
		}catch(Exception e){
			model.addAttribute("error","Error processing request");
		}

		model.addAttribute("registerForm", new Registerform());
		System.out.println("@@@@ LoginController @@@@");
		return "register";
	}
	
	
	@RequestMapping(value = "/freemi", method = RequestMethod.GET)
	public String freemiReplaced(ModelMap model, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
	return "redirect:/freemi-loan";
	}
	
	@RequestMapping(value = "/registry", method = RequestMethod.GET)
	public String registryReplaced(ModelMap model, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
	return "redirect:/registry-mutual-funds";
	}
	
	
	@RequestMapping(value = "/fsecure", method = RequestMethod.GET)
	public String fsecureReplaced(ModelMap model, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
	return "redirect:/fsecure-insurance";
	}
	
	@RequestMapping(value = "/registry-mutual-funds", method = RequestMethod.GET)
	public String registryMutualReplaced(ModelMap model, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
	return "registry-mutual-funds";
	}


	
/*	
	@RequestMapping(value = "/registry-mutual-funds", method = RequestMethod.GET)
	public String registryDisplay(ModelMap model) {
		System.out.println("@@@@ RegistryController @@@@");
		List<ProductSchemeDetail> productlist = productSchemeDetailService.findForRegistryBirthDay();
		List<ProductSchemeDetail> taxsavingSchemelist = productSchemeDetailService.findForTaxSaving();
		List<ProductSchemeDetail> travelSchemelist = productSchemeDetailService.findForTravel();
		
		List<ProductSchemeDetail> birthDaytlist = new ArrayList<ProductSchemeDetail>();
		List<ProductSchemeDetail> annivesarylist = new ArrayList<ProductSchemeDetail>();
		List<ProductSchemeDetail> taxsavinglist = new ArrayList<ProductSchemeDetail>();
		if(productlist.size() > 4) {
			birthDaytlist = new ArrayList<ProductSchemeDetail>(productlist.subList(0, 4));
		}else {
			birthDaytlist = new ArrayList<ProductSchemeDetail>(productlist.subList(0, productlist.size()));
		}
		
		if(taxsavingSchemelist.size() > 4) {
			taxsavinglist = new ArrayList<ProductSchemeDetail>(taxsavingSchemelist.subList(0, 4));
		}else {
			taxsavinglist = new ArrayList<ProductSchemeDetail>(taxsavingSchemelist.subList(0, taxsavingSchemelist.size()));
		}
		
		if(travelSchemelist.size() > 4) {
			annivesarylist = new ArrayList<ProductSchemeDetail>(travelSchemelist.subList(0, 4));
		}else {
			annivesarylist = new ArrayList<ProductSchemeDetail>(travelSchemelist.subList(0, travelSchemelist.size()));
		}
		
		
		model.addAttribute("productlist", birthDaytlist);
		model.addAttribute("annivesarylist", annivesarylist);
		model.addAttribute("taxsavinglist", taxsavinglist);
		System.out.println("@@@@ RegistryController Data Load Comleted @@@@");
		return "registry3";
	}
	*/
	
	
	@RequestMapping(value = "/loans", method = RequestMethod.GET)
	public String freemiDisplay(ModelMap model, HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		//logger.info("@@@@ Inside Login..");
//		model.addAttribute("freemiLoanForm", new FreemiLoanForm());
//		model.addAttribute("loanamount", 55000);
		
		if(session.getAttribute("plsaved")!=null && session.getAttribute("plsaved").toString().equalsIgnoreCase("Y")){
			model.addAttribute("REQUESTSUCCESS","Y");
			model.addAttribute("requestmessage", "Thank you. Our personal finance executive will contact you to process your requirements.");
			session.removeAttribute("plsaved");
			
		}else if(session.getAttribute("hlsaved")!=null && session.getAttribute("hlsaved").toString().equalsIgnoreCase("Y")){
			model.addAttribute("REQUESTSUCCESS","Y");
			model.addAttribute("requestmessage", "Thank you. Our personal finance executive will contact you to process your requirements.");
			session.removeAttribute("hlsaved");
		}else if(session.getAttribute("ccsaved")!=null && session.getAttribute("ccsaved").toString().equalsIgnoreCase("Y")){
			model.addAttribute("REQUESTSUCCESS","Y");
			model.addAttribute("requestmessage", "Thank you. Our personal finance executive will contact you to process your requirements.");
			session.removeAttribute("ccsaved");
		}else{
			model.addAttribute("REQUESTSUCCESS","N");
		}
		
		
//		System.out.println("IS PL SAVED- "+session.getAttribute("plsaved"));
		
		FreemiLoanQuery personalLoan = new FreemiLoanQuery();
		FreemiLoanQuery homeLoan = new FreemiLoanQuery();
		FreemiLoanQuery creditCard = new FreemiLoanQuery();
		personalLoan.setRequestCategory("PL");
		homeLoan.setRequestCategory("HL");
		creditCard.setRequestCategory("CC");
		
		model.addAttribute("personalLoan", personalLoan);
		model.addAttribute("homeLoan", homeLoan);
		model.addAttribute("creditCard", creditCard);
		
		System.out.println("@@@@ FreemiController @@@@");
		return "freemi-loan";
	}

	@RequestMapping(value = "/freemi.do", method = RequestMethod.GET)
	public String freemiDoPost(ModelMap model) {
		//logger.info("@@@@ Inside Login..");
		return "redirect:/freemi-loan";
	}

	@RequestMapping(value = "/freemi.do", method = RequestMethod.POST)
	public String freemiSubmit(ModelMap model) {
		//logger.info("@@@@ Inside Login..");
		model.addAttribute("freemiLoanForm", new FreemiLoanForm());
		System.out.println("@@@@ FreemiDoController @@@@");
		return "freemi-loan";
	}
	
	@RequestMapping(value = "/personalLoan.do", method = RequestMethod.POST)
	public String personalLoanQuerySubmit(@ModelAttribute("personalLoan") FreemiLoanQuery personalLoan,Model model,HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		System.out.println("@@@@ PersonalLoadController @@@@");
		System.out.println(personalLoan.getMobile());
		
		
		ClientSystemDetails system= CommonTask.getClientSystemDetails(request);
		
		personalLoan.setRequestTime(new Date());
		personalLoan.setSystemIp(system.getClientIpv4Address());
		personalLoan.setBrowserClient(system.getClientBrowser());
		
		System.out.println(personalLoan.getDndAgree());
		
		if(freemiServiceInterface.savePersonalLoanQuery(personalLoan)){
			session.setAttribute("plsaved", "Y");
		}else{
			session.setAttribute("plsaved", "N");
		}
		return "redirect:/freemi-loan";
	}
	
	@RequestMapping(value = "/homeLoan.do", method = RequestMethod.POST)
	public String homeLoanQuerySubmit(@ModelAttribute("homeLoan") FreemiLoanQuery homeLoan,Model model,HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		logger.info("@@@@ PersonalLoadController @@@@");
		
		ClientSystemDetails system= CommonTask.getClientSystemDetails(request);
		logger.info("Home loan request received for - "+ homeLoan.getMobile());
		homeLoan.setRequestTime(new Date());
		homeLoan.setSystemIp(system.getClientIpv4Address());
		homeLoan.setBrowserClient(system.getClientBrowser());
		if(homeLoan.getMobile()!=null){
		if(freemiServiceInterface.saveHomeLoanQuery(homeLoan)){
			session.setAttribute("hlsaved", "Y");
		}else{
			session.setAttribute("hlsaved", "N");
		}
		}else{
			logger.info("Home loan data missing;");
		}
		return "redirect:/freemi-loan";
	}
	
	@RequestMapping(value = "/creditCard.do", method = RequestMethod.POST)
	public String creditCardQuerySubmit(@ModelAttribute("creditCard") FreemiLoanQuery creditCard,Model model,HttpServletRequest request, HttpServletResponse response, HttpSession session) {
		System.out.println("@@@@ PersonalLoadController @@@@");
//		System.out.println(creditCard.getMobile());
		
		ClientSystemDetails system= CommonTask.getClientSystemDetails(request);
		
		creditCard.setRequestTime(new Date());
		creditCard.setSystemIp(system.getClientIpv4Address());
		creditCard.setBrowserClient(system.getClientBrowser());
		
		if(freemiServiceInterface.saveCreditCardLoanQuery(creditCard)){
			session.setAttribute("ccsaved", "Y");
		}else{
			session.setAttribute("ccsaved", "N");
		}
		return "redirect:/freemi-loan";
	}
	
	

	@RequestMapping(value = "/fsecure-insurance", method = RequestMethod.GET)
	public String fsecureDisplay(ModelMap model) {
		//logger.info("@@@@ Inside Login..");
		model.addAttribute("fsecureForm", new FSecure());
		System.out.println("@@@@ FsecureController @@@@");
		return "fsecure-insurance";
	}

	@RequestMapping(value = "/fsecure.do", method = RequestMethod.GET)
	public String fsecureDoDisplay(ModelMap model) {
		return "redirect:/fsecure-insurance";
	}

	@RequestMapping(value = "/fsecure.do", method = RequestMethod.POST)
	public String fseucreSubmit(@ModelAttribute("fsecureForm") FSecure fsecureForm,ModelMap model, HttpServletRequest request) {
		//logger.info("@@@@ Inside Login..");
		//		System.out.println(fsecureForm.getDob());

		fsecureForm.setProductCode("2001");
		RestClient client = new RestClient();
		ResponseEntity<String> response = null;
		try {
			response = client.fsecureRequest(fsecureForm,CommonTask.getClientSystemDetails(request).getClientIpv4Address());
			//			System.out.println(response.getBody());
			//			System.out.println(response.getHeaders());
			//			model.addAttribute("success", response.getBody());
			//			model.addAttribute("contactForm", new ContactUsForm());
			System.out.println(response.getHeaders());
			System.out.println(response.getHeaders().get("STATUS").get(0));
		}catch(HttpStatusCodeException  e){
			System.out.println("test failure - " + e.getStatusCode());
			//			model.addAttribute("error", "Unable to process request curretnly");
		} catch (JsonProcessingException e) {
			//			model.addAttribute("error","Invalid form data");
		}catch(Exception e){
			//			model.addAttribute("error","Error processing request");
		}



		DateTimeFormatter format = DateTimeFormatter.ofPattern("yyyy-MM-d");
		LocalDate d = LocalDate.parse("2000-06-25" , format);

		//		model.addAttribute("fsecureForm", new FSecure());

		System.out.println("@@@@ FsecureDoController @@@@");
		//        return "fsecure";
		return "redirect:https://onlineinsurance.hdfclife.com/ocp?sumAssured=&premium=&freq=&state=&city=&prodcd=C2P3DPER&option=&pptOption=&source=P_FREEMI_C2P3DP&agentcode=00702816&term=&ppt=&topupFlag=N&ADBPercentage=&topupPercentage=&lumpsum=&monthlyIncome=&incomeTerm=&increaseIncomePercentage=&jrnyFlow=Choose&ocpflag=N"
		+"&fname="+fsecureForm.getFname()
		+"&lname="+fsecureForm.getLname()
		+"&email="+fsecureForm.getEmail()
		+"&gender="+fsecureForm.getGender()
		+"&mobno="+fsecureForm.getMobile()
		+"&dob="+d.getDayOfMonth()+"/"+String.format("%02d" , d.getMonthValue())+"/"+d.getYear()
		+"&tobstatus="+fsecureForm.getIsSmoker()
		+"&checkboxdisclaimer="+fsecureForm.getAllowcalls()
		;
	}
/*
	@RequestMapping(value = "/registry-mutual-funds", method = RequestMethod.GET)
	public String registryDisplay(ModelMap model) {
		//logger.info("@@@@ Inside Login..");
		//		model.addAttribute("fsecureForm", new FSecure());
		System.out.println("@@@@ RegistryController @@@@");
		List<ProductSchemeDetail> productlist = productSchemeDetailService.findForRegistryBirthDay();
		List<ProductSchemeDetail> taxsavingSchemelist = productSchemeDetailService.findForTaxSaving();
		List<ProductSchemeDetail> travelSchemelist = productSchemeDetailService.findForTravel();
		
		List<ProductSchemeDetail> birthDaytlist = new ArrayList<ProductSchemeDetail>();
		List<ProductSchemeDetail> annivesarylist = new ArrayList<ProductSchemeDetail>();
		List<ProductSchemeDetail> taxsavinglist = new ArrayList<ProductSchemeDetail>();
		if(productlist.size() > 4) {
			birthDaytlist = new ArrayList<ProductSchemeDetail>(productlist.subList(0, 4));
		}else {
			birthDaytlist = new ArrayList<ProductSchemeDetail>(productlist.subList(0, productlist.size()));
		}
		
		if(taxsavingSchemelist.size() > 4) {
			taxsavinglist = new ArrayList<ProductSchemeDetail>(taxsavingSchemelist.subList(0, 4));
		}else {
			taxsavinglist = new ArrayList<ProductSchemeDetail>(taxsavingSchemelist.subList(0, taxsavingSchemelist.size()));
		}
		
		if(travelSchemelist.size() > 4) {
			annivesarylist = new ArrayList<ProductSchemeDetail>(travelSchemelist.subList(0, 4));
		}else {
			annivesarylist = new ArrayList<ProductSchemeDetail>(travelSchemelist.subList(0, travelSchemelist.size()));
		}
		
		
		model.addAttribute("productlist", birthDaytlist);
		model.addAttribute("annivesarylist", annivesarylist);
		model.addAttribute("taxsavinglist", taxsavinglist);
		return "registry-mutual-funds";
	}
*/
	
	/*
	@RequestMapping(value = "/registry/registry-wish", method = RequestMethod.GET)
	public String registryWishDisplay(@RequestParam(value="category") String category, @RequestParam(value="type") String type, @RequestParam(value="schemeId") Long schemeId, Model model) {
		//logger.info("@@@@ Inside Login..");
		String event_based_image = "";
		RegistryWish registryWish = new RegistryWish(); 
		System.out.println("@@@@ scheme="+schemeId);

		if(type.equals("marriage")){
			event_based_image="registry_marriage.png";
		}else if(type.equals("parties")){
			event_based_image="registry_parties.png";
		}else if(type.equals("anniversary")){
			event_based_image="registry_anniversary.png";
		}else{
			event_based_image= "registry_birthday.png";
		}

		Map<String, String> personType = new HashMap<String, String>();
		if(category.equals("family")){
			personType.put("daughter","Daughter");
			personType.put("son","Son");
			personType.put("others","Others");
		}
		else if(category.equals("friends")){
			personType.put("his","His");
			personType.put("her","Her");
			personType.put("others","Others");
		}
		else if(category.equals("office")){
			personType.put("colleagues","Colleagues");
		}else{
			personType.put("others","Others");
		}

		model.addAttribute("event_based_image",event_based_image);
		model.addAttribute("category", category);
		model.addAttribute("type", type);
		model.addAttribute("personType", personType);

		registryWish.setWishType(type);
		registryWish.setSchemeId(schemeId);
		model.addAttribute("registryWishForm", registryWish);
		model.addAttribute("schemeId", schemeId);
		System.out.println("@@@@ RegistryWishController :: schemeId"+schemeId);
		return "registry-wish";
	}*/
	
	@RequestMapping(value = "/registry/registry-wish", method = RequestMethod.GET)
	public String registryWishDisplay(@RequestParam(value="category") String category, @RequestParam(value="type") String type,  Model model) {
		//logger.info("@@@@ Inside Login..");
		String event_based_image = "";
		RegistryWish registryWish = new RegistryWish(); 
//		System.out.println("@@@@ scheme="+schemeId);

		if(type.equals("marriage")){
			event_based_image="registry_marriage.png";
		}else if(type.equals("parties")){
			event_based_image="registry_parties.png";
		}else if(type.equals("anniversary")){
			event_based_image="registry_anniversary.png";
		}else{
			event_based_image= "registry_birthday.png";
		}

		Map<String, String> personType = new HashMap<String, String>();
		if(category.equals("family")){
			personType.put("daughter","Daughter");
			personType.put("son","Son");
			personType.put("others","Others");
		}
		else if(category.equals("friends")){
			personType.put("his","His");
			personType.put("her","Her");
			personType.put("others","Others");
		}
		else if(category.equals("office")){
			personType.put("colleagues","Colleagues");
		}else{
			personType.put("others","Others");
		}

		model.addAttribute("event_based_image",event_based_image);
		model.addAttribute("category", category);
		model.addAttribute("type", type);
		model.addAttribute("personType", personType);

		registryWish.setWishType(type);
		registryWish.setSchemeId(113L);
		model.addAttribute("registryWishForm", registryWish);
		model.addAttribute("schemeId", 113L);
		System.out.println("@@@@ RegistryWishController :: schemeId"+113L);
		
		return "registry-wish";
	}
	
	
	

	@RequestMapping(value = "/registry/registryWish.do", method = RequestMethod.GET)
	public String registryWishSubmitGet(@RequestParam(value="schemeId") String schemeId, Model model) {
		System.out.println("@@@@ Inside registryWishSubmitGet scheme="+schemeId);
		return "redirect:/registry-mutual-funds";
	}
	
	
	
	
	/*f*/

	@RequestMapping(value = "/registry/registryWish.do", method = RequestMethod.POST)
	public String registryWishSubmit(@ModelAttribute("type") String type, @ModelAttribute("registryWishForm") RegistryWish registryWish, RegistryFunds chooseFund, ModelMap model) {

		String returnUrl="";
		if(registryWish == null){
			returnUrl = "registry-wish";
		}else{
			System.out.println("type- "+ type);
			System.out.println("wish type from form- "+ registryWish.getWishType());
			model.addAttribute("type", registryWish.getWishType() );
			System.out.println("SchemeId= "+ registryWish.getSchemeId());
			ProductSchemeDetail pdetails = productSchemeDetailService.getById(registryWish.getSchemeId());
			RegistryFunds funds = new RegistryFunds();

			ArrayList<RegistryFunds> fundsList = new ArrayList<RegistryFunds>();
			funds.setFundName("Aditya Birla Sun Life Income Fund - Growth - Regular Plan");
			funds.setSchemeCode("301G");
			funds.setSchemeOption("Z");
			funds.setFundRating(2);
			funds.setFundReturn("7.904");
			funds.setReturnOneMonth("0.71");
			funds.setReturnThreeMonths("1.776");
			funds.setReturnSixMonths("3.397");
			funds.setReturnThreeMonths("6.763");
			funds.setMonthlySavings("2000");
			fundsList.add(funds);

			funds = new RegistryFunds();

			funds.setFundName("Aditya Birla Sun Life Equity Savings Fund - Gr. REGULAR");
			funds.setSchemeCode("249B");
			funds.setSchemeOption("Z");
			funds.setFundRating(2);
			funds.setFundReturn("4.904");
			funds.setReturnOneMonth("0.71");
			funds.setReturnThreeMonths("1.776");
			funds.setReturnSixMonths("3.397");
			funds.setReturnThreeMonths("6.763");
			funds.setMonthlySavings("3000");
			fundsList.add(funds);

			model.addAttribute("fundsList", fundsList);
			model.addAttribute("fundSelect", chooseFund);

			System.out.println("@@@@ RegistryWishDoController @@@@");
			returnUrl = "registry-funds";
		}
		return returnUrl;
	}

	/*@RequestMapping(value = "/registry/registryFunds.do", method = RequestMethod.POST)
    public String getRegistryFundsSubmit( @ModelAttribute("registryWishForm") RegistryWish registryWish,@ModelAttribute("fundSelect") RegistryFunds chosenFund, MFInvestForm mfInvestForm, ModelMap model) {
		//logger.info("@@@@ Inside Login..");
		ProductSchemeDetail pdetails = productSchemeDetailService.getById(registryWish.getSchemeId());
		RegistryFunds funds = new RegistryFunds();
		funds.setFundName(pdetails.getSchemeName());
		funds.setSchemeCode(pdetails.getSchemeCode());
		funds.setSchemeOption(pdetails.getSchemeOption());
		funds.setFundRating(2);
		funds.setFundReturn(""+pdetails.getPReturn_1Y());
		funds.setReturnOneMonth(""+pdetails.getPReturn_1M());
		funds.setReturnThreeMonths(""+pdetails.getPReturn_3M());
		funds.setReturnSixMonths(""+pdetails.getPReturn_6M());
		//funds.setReturnThreeMonths("6.763");
		funds.setMonthlySavings(registryWish.getAmount());
		//fundsList.add(funds);
		System.out.println("@@@@ registryFunds.doPostController @@@@");
		mfInvestForm.setSelectedFund(funds);
		
		mfInvestForm.setInvestmentType(registryWish.getInvestType());
		
		System.out.println("Selected- "+ funds.getFundRating());
		model.addAttribute("mfInvestForm", mfInvestForm);
		model.addAttribute("aadhaarotp", new AadhaarOTP());
		model.addAttribute("showAadhaar", false);
		return "mfekyc";
    }*/
	
	

	/*@RequestMapping(value = "/registryFunds.do/{fundName}", method = RequestMethod.GET)
	public String registryFundsSubmit(@ModelAttribute("fundSelect") RegistryFunds registryFunds,@PathVariable("fundName") String fundName ,MFInvestForm mfInvestForm, ModelMap model) {
		//logger.info("@@@@ Inside Login..");

		System.out.println("@@@@ registryFunds.doGetController @@@@");
		System.out.println(fundName);
		mfInvestForm.setSelectedFund(registryFunds);
		System.out.println("Selected- "+ registryFunds.getFundName());
		model.addAttribute("mfInvestForm", mfInvestForm);
		model.addAttribute("aadhaarotp", new AadhaarOTP());
		model.addAttribute("showAadhaar", false);
		return "mfekyc";
	}
*/
	
	@RequestMapping(value = "/registry/registryFunds.do", method = RequestMethod.POST)
	public String registryFundsSubmit(@ModelAttribute("fundSelect") RegistryFunds registryFunds,MFInvestForm mfInvestForm, ModelMap model) {
		//logger.info("@@@@ Inside Login..");

		System.out.println("@@@@ registryFunds.doGetController @@@@");
//		System.out.println(fundName);
		mfInvestForm.setSelectedFund(registryFunds);
		System.out.println("Selected- "+ registryFunds.getFundName());
		model.addAttribute("mfInvestForm", mfInvestForm);
		model.addAttribute("aadhaarotp", new AadhaarOTP());
		model.addAttribute("showAadhaar", false);
		return "mfekyc";
	}

	
	
	
	@RequestMapping(value = "/registry/registry-retirement", method = RequestMethod.GET)
	public String registryRetirementGet(Model model) {
		System.out.println("RegistryRetirementGetController");
		model.addAttribute("retirementForm", new RegistryRetirement());

		return "registry-retirement";
	}

	@RequestMapping(value = "/registry/registry-retirement.do", method = RequestMethod.GET)
	public String registryRetirementDoGet(Model model) {
		System.out.println("RegistryRetirementDoGetController");

		return "redirect:/registry/registry-retirement";
	}

	@RequestMapping(value = "/registry/registry-retirement.do", method = RequestMethod.POST)
	public String registryRetirementDoget(@ModelAttribute("retirementForm") RegistryRetirement retirementForm,Model model) {
		System.out.println("RegistryRetirementDoPostController");
		return "registry-retirement";
	}



	@RequestMapping(value = "/registry/registry-child-education", method = RequestMethod.GET)
	public String registryChildEducationGet(Model model) {
		System.out.println("RegistryChildEducationGetController");
		model.addAttribute("childEducationForm", new RegistryChildEducation());

		return "registry-child-education";
	}

	@RequestMapping(value = "/registry/registry-child-education.do", method = RequestMethod.GET)
	public String registryChildEducationDoGet(Model model) {
		System.out.println("RegistryChildEducationDoGetController");

		return "redirect:/registry/registry-child-education";
	}

	@RequestMapping(value = "/registry/registry-child-education.do", method = RequestMethod.POST)
	public String registryChildEducation(@ModelAttribute("childEducationForm") RegistryChildEducation childEducationForm,Model model) {
		System.out.println("RegistryChildEducationDoPostController");

		return "registry-child-education";
	}

	@RequestMapping(value = "/registry/registry-travel", method = RequestMethod.GET)
	public String registryTravelGet(Model model) {
		System.out.println("RegistryTravelGetController");
		model.addAttribute("travelForm", new RegistryTravel());

		return "registry-travel";
	}

	@RequestMapping(value = "/registry/registry-travel.do", method = RequestMethod.GET)
	public String registryTravelDoGet(Model model) {
		System.out.println("RegistryTravelDoGetController");

		return "redirect:/registry/registry-travel";
	}
	@RequestMapping(value = "/registry/registry-travel.do", method = RequestMethod.POST)
	public String registryTravelDoPost(@ModelAttribute("travelForm") RegistryTravel travelForm,Model model) {
		System.out.println("RegistryTravelDoPostController");

		return "registry-travel";
	}

	@RequestMapping(value = "/registry/office-expense", method = RequestMethod.GET)
	public String OfficeExpenseGet(Model model) {
		System.out.println("OfficeExpenseGetController");
		model.addAttribute("officeExpenseForm", new RegistryOfficeExpense());

		return "registry-office-expense";
	}
	@RequestMapping(value = "/registry/office-expense.do", method = RequestMethod.GET)
	public String OfficeExpenseDoGet(Model model) {
		System.out.println("OfficeExpenseDoGetController");

		return "redirect:/registry/registry-office-expense";
	}
	@RequestMapping(value = "/registry/office-expense.do", method = RequestMethod.POST)
	public String OfficeExpenseDoPost(@ModelAttribute("officeExpenseForm") RegistryOfficeExpense officeExpenseForm,Model model) {
		System.out.println("OfficeExpenseDoPostController");

		return "registry-office-expense";

	}

	

	@RequestMapping(value = "/signupcamp", method = RequestMethod.GET)
	public String SignupCampGet(Model model) {
		System.out.println("OfficeExpenseDoGetController");

		return "campaign/signup";
	}


	@ModelAttribute("creditType")
	public Map<String, String> getCreditType() {
		Map<String, String> creditType = new HashMap<String, String>();
		creditType.put("Contingency", "Contingency");
		creditType.put("Emergency", "Emergency");
		creditType.put("Medical", "Medical");
		creditType.put("Restructure debt", "Restructure debt");
		return creditType;
	}

	@ModelAttribute("loanTenureList")
	public Map<Integer, String> getLonTenureList() {
		Map<Integer, String> loanTenureList = new HashMap<Integer, String>();
		loanTenureList.put(3, "3");
		loanTenureList.put(5, "5");
		loanTenureList.put(7, "7");
		loanTenureList.put(9, "9");
		loanTenureList.put(11, "11");
		return loanTenureList;
	}

	@ModelAttribute("cityList")
	public Map<String, String> getCityList() {
		Map<String, String> cityList = new HashMap<String, String>();
		cityList.put("KOL", "Kolkata");
		cityList.put("DUR", "Durgapur");
		cityList.put("Siliguri", "Siliguri");
		cityList.put("Malda", "Malda");
		return cityList;
	}




	@ModelAttribute("investmentType")
	public Map<String, String> getinvestmentType() {
		Map<String, String> investmentType = new HashMap<String, String>();
		investmentType.put("SIPT", "SIP based on your target amount");
		investmentType.put("SIPM", "SIP based contribution");
//		investmentType.put("TARGET_PLAN", "Target Plan");
		return investmentType;
	}


	@ModelAttribute("freemiLoanCategory")
	public Map<String, String> getloanCategory() {
		Map<String, String> investmentType = new HashMap<String, String>();
		investmentType.put("FIXED", "Fixed Credit");
		investmentType.put("FLEXIBLE", "Flexible Credit");
		investmentType.put("NOCOST", "No Cost EMI");
		return investmentType;
	}

	@ModelAttribute("officeRole")
	public Map<String, String> officeRoles() {
		Map<String, String> officeDesignation = new HashMap<String, String>();
		officeDesignation.put("Officer", "Officer");
		officeDesignation.put("Executive", "Executive");
		officeDesignation.put("Manager", "Manager");
		officeDesignation.put("Management", "Management");
		officeDesignation.put("Others", "Others");

		return officeDesignation;
	}

	@ModelAttribute("transportType")
	public Map<String, String> transportType() {
		Map<String, String> transportType = new HashMap<String, String>();
		transportType.put("Bike", "Bike");
		transportType.put("Car", "Car");
		transportType.put("Taxi-Hailing App", "Taxi-Hailing App");
		transportType.put("Auto", "Auto");
		transportType.put("Bus", "Bus");
		transportType.put("Shuttle", "Shuttle");
		transportType.put("Train", "Train");

		return transportType;
	}
	
	
	

	/*	public static void main(String[] args) throws ParseException{

		DateTimeFormatter format = DateTimeFormatter.ofPattern("yyyy-MM-d");
		LocalDate d = LocalDate.parse("2000-01-25" , format);
		System.out.println(d);
		System.out.println(d.getDayOfMonth());
		System.out.println(d.getMonthValue());
		System.out.println( String.format("%02d" , d.getMonthValue()));
		System.out.println(d.getYear());
	}*/

}
